

> library(track)
> # Set the locale used by order() so that track.status() & track.summary() put
> # rows in the same order on different systems (so that the test output matches).
> invisible(Sys.setlocale("LC_COLLATE", "C"))
> options(width=120)
> options(error=function() NULL)
> unlink("tmp6", recursive=TRUE)
> options(global.track.options=list(cacheKeepFun='none'))
> track.start("tmp6")
Tracking <env R_GlobalEnv> (writable) using new directory 'tmp6'
> x <- 33
> X <- array(1:24, dim=2:4)
> track.status()
   Status InMem FileBase FileExists Saved
X tracked FALSE       _2       TRUE  TRUE
x tracked FALSE        x       TRUE  TRUE
> track.options(cache=TRUE, writeToDisk=FALSE, cachePolicy="none") # change for just this session
> # different ways of retrieving option values
> track.options(c("cache", "writeToDisk", "cachePolicy"))
$cache
[1] TRUE

$writeToDisk
[1] FALSE

$cachePolicy
[1] "none"

> track.options("cache", "writeToDisk", "cachePolicy")
$cache
[1] TRUE

$writeToDisk
[1] FALSE

$cachePolicy
[1] "none"

> track.options("cache")
$cache
[1] TRUE

> track.options()
$alwaysCache
[1] ".Last"

$alwaysCacheClass
[1] "ff"

$alwaysSaveSummary
[1] FALSE

$autoTrackExcludeClass
[1] "RODBC"

$autoTrackExcludePattern
[1] "^\\.track"      "^\\.required"   "^\\*tmp\\*$"    "^.vimplemented" "^.vcoerceable" 

$autoTrackFullSyncWait
[1] -1

$cache
[1] TRUE

$cacheKeepFun
[1] "none"

$cachePolicy
[1] "none"

$clobberVars
[1] ".Random.seed"

$compress
[1] TRUE

$compression_level
[1] 1

$debug
[1] 0

$use.fake.Sys.time
[1] FALSE

$maintainSummary
[1] TRUE

$RDataSuffix
[1] "rda"

$readonly
[1] FALSE

$recordAccesses
[1] TRUE

$summaryAccess
[1] 1

$summaryTimes
[1] 1

$writeToDisk
[1] FALSE

> # see the effect of the changed options on the status of X (not saved to disk)
> track.auto(FALSE)
> track.status()
   Status InMem FileBase FileExists Saved
X tracked FALSE       _2       TRUE  TRUE
x tracked FALSE        x       TRUE  TRUE
> X[1,1,1] <- 0
> track.status()
   Status InMem FileBase FileExists Saved
X tracked  TRUE       _2       TRUE FALSE
x tracked FALSE        x       TRUE  TRUE
> track.flush()
> track.status()
   Status InMem FileBase FileExists Saved
X tracked FALSE       _2       TRUE  TRUE
x tracked FALSE        x       TRUE  TRUE
> track.stop(pos=1)
Stopping tracking on <env R_GlobalEnv>
> track.start("tmp6")
Tracking <env R_GlobalEnv> (writable) using existing directory 'tmp6'
> # note that options previously changed are back at defaults (because default
> # to track.options() is save=FALSE
> track.options(c("cache", "writeToDisk", "cachePolicy"))
$cache
[1] TRUE

$writeToDisk
[1] TRUE

$cachePolicy
[1] "eotPurge"

> track.options(cache=TRUE, writeToDisk=FALSE, save=TRUE) # change the options on disk
> track.options(c("cache", "writeToDisk", "cachePolicy"))
$cache
[1] TRUE

$writeToDisk
[1] FALSE

$cachePolicy
[1] "eotPurge"

> track.stop(pos=1)
Stopping tracking on <env R_GlobalEnv>
> track.start("tmp6")
Tracking <env R_GlobalEnv> (writable) using existing directory 'tmp6'
> # now options previously changed are remembered (because track.options(..., save=TRUE) was used)
> track.options(c("cache", "writeToDisk", "cachePolicy"))
$cache
[1] TRUE

$writeToDisk
[1] FALSE

$cachePolicy
[1] "eotPurge"

> # Test how multi-value options are handled
> track.options("autoTrackExcludePattern")
$autoTrackExcludePattern
[1] "^\\.track"      "^\\.required"   "^\\*tmp\\*$"    "^.vimplemented" "^.vcoerceable" 

> track.options(autoTrackExcludePattern="pattern")
> track.options("autoTrackExcludePattern")
$autoTrackExcludePattern
[1] "^\\.track"      "^\\.required"   "^\\*tmp\\*$"    "^.vimplemented" "^.vcoerceable"  "pattern"       

> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "RODBC"

> track.options("autoTrackExcludeClass"="someclass")
> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "RODBC"     "someclass"

> track.options("autoTrackExcludeClass"="someclass", delete=T)
> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "RODBC"

> track.options("autoTrackExcludeClass"="someclass", clear=T)
> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "someclass"

> track.options("autoTrackExcludeClass"="RODBC")
> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "someclass" "RODBC"    

> track.options("autoTrackExcludeClass"="RODBC")
> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "someclass" "RODBC"    

> track.options("autoTrackExcludeClass"="someclass", delete=T)
> track.options("autoTrackExcludeClass")
$autoTrackExcludeClass
[1] "RODBC"

> browser <- function() NULL # just for automated testing -- omit this to really use the browser()
> track.options(cacheKeepFun=function(objs, inmem, envname) {keep <- rep(FALSE, length(inmem)); browser(); return(keep)})
> track.options("cacheKeepFun")
$cacheKeepFun
function (objs, inmem, envname) 
{
    keep <- rep(FALSE, length(inmem))
    browser()
    return(keep)
}

> track.options(cacheKeepFun=NULL)
> track.options("cacheKeepFun")
$cacheKeepFun
NULL

> 
> track.stop(pos=1)
Stopping tracking on <env R_GlobalEnv>
> unlink("tmp6", recursive=TRUE)
> 
