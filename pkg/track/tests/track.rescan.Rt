> options(error=function() NULL)
> invisible(if (file.exists("tmp15")) unlink("tmp15", recursive=TRUE))
> invisible(if (file.exists("tmp16")) unlink("tmp15", recursive=TRUE))
> options(global.track.options=list(cacheKeepFun=NULL))
> # Create one db
> track.attach("tmp15", pos=2, name="track:tmp15", readonly=FALSE, create=TRUE)
Attaching tracking db in 'tmp15' to env in pos 2 (writable)
> assign("x", 1, pos=2)
> assign("z", 3, pos=2)
> track.status(pos=2)
   Status InMem FileBase FileExists Saved
x tracked FALSE        x       TRUE  TRUE
z tracked FALSE        z       TRUE  TRUE
> track.detach(pos=2)
Stopping tracking on <env track:tmp15>
Removing <env track:tmp15> from the search path
> 
> # Create the second db
> track.attach("tmp16", pos=2, name="track:tmp16", readonly=FALSE, create=TRUE)
Attaching tracking db in 'tmp16' to env in pos 2 (writable)
> assign("x", 11, pos=2)
> assign("y", 12, pos=2)
> track.status(pos=2)
   Status InMem FileBase FileExists Saved
x tracked FALSE        x       TRUE  TRUE
y tracked FALSE        y       TRUE  TRUE
> x
[1] 11
> y
[1] 12
> file.rename("tmp16", "tmp16.hid")
[1] TRUE
> file.rename("tmp15", "tmp16")
[1] TRUE
> track.rescan(pos=2)
Stopping tracking on <env track:tmp16>
Tracking <env track:tmp16> (writable) using existing directory 'tmp16'
> track.status(pos=2)
   Status InMem FileBase FileExists Saved
x tracked FALSE        x       TRUE  TRUE
z tracked FALSE        z       TRUE  TRUE
> x
[1] 1
> y
Error: object 'y' not found
> z
[1] 3
> # want tracking to stop automatically on quitting R
> # but if run test interactively have to stop manually
> invisible(if (interactive()) {track.stop(); unlink("tmp16.hid", recursive=TRUE); unlink("tmp16", recursive=TRUE)})
> 
Stopping all tracking via call from .Last()
Stopping tracking on <env track:tmp16>
Removing <env track:tmp16> from the search path
